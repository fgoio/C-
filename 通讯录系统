#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#define Max 1000
using namespace std;

void showmenu()
{
	cout << "**************************" << endl;
	cout << "*****  1.添加联系人  *****" << endl;
	cout << "*****  2.显示联系人  *****" << endl;
	cout << "*****  3.删除联系人  *****" << endl;
	cout << "*****  4.查找联系人  *****" << endl;
	cout << "*****  5.修改联系人  *****" << endl;
	cout << "*****  6.清空联系人  *****" << endl;
	cout << "*****  0.退出通讯录  *****" << endl;
	cout << "**************************" << endl;
}
struct person
{
	string m_Name;
	int m_Sex;
	int m_Age;
	string m_Phone;
	string m_Address;

};
struct Addressbooks
{
	struct person personarray[Max];
	int m_Size;

};
void addPerson(Addressbooks* abs)
{
	if (abs->m_Size == Max)
	{
		cout << "通讯录已满，无法添加！" << endl;
		return;
	}	
	else
	{
		//姓名
		string name;
		cout << "请输入姓名：" << endl;
		cin >> name;
		abs->personarray[abs->m_Size].m_Name = name;

		//性别
		cout << "请输入性别：" << endl;
		cout << "1--- 男" << endl;
		cout << "2--- 女" << endl;
		int sex = 0;
		while (true)
		{
			cin >> sex;
			if (sex == 1 || sex == 2)
		    {
			abs->personarray[abs->m_Size].m_Sex = sex;
			break;
		    }
			cout << "输入错误，请重新输入！" << endl;
		}
		//年龄
		cout << "请输入年龄：" << endl;
		int age = 0;
		
		while (true)
		{
			cin >> age;
			if (age > 0 && age <= 100)
			{
				abs->personarray[abs->m_Size].m_Age = age;
				break;
			}cout << "输入错误，请重新输入！" << endl;
		}
		//电话
		string phone;
		 cout << "请输入联系人的电话号码：" << endl;
		cin >> phone;
		abs->personarray[abs->m_Size].m_Phone = phone;
		//地址
		string address;
		cout << "请输入地址：" << endl;
		cin >> address;
		abs->personarray[abs->m_Size].m_Address = address;

		//更新人数
		abs->m_Size++;
		cout << "添加成功" << endl;
		system("pause");
		system("cls");//清屏
	}
	
}
void showperson(Addressbooks* abs)
{
	if (abs->m_Size == 0)
	{
		cout << "当前记录为空" << endl;
	}
	else {
		for (int i = 0; i < abs->m_Size; i++)
		{
			cout << "姓名：" << abs->personarray[i].m_Name << "\t";
			cout << "性别：" << (abs->personarray[i].m_Sex==1 ?"男":"女" )<< "\t";
			cout << "年龄：" << abs->personarray[i].m_Age << "\t";
			cout << "电话：" << abs->personarray[i].m_Phone << "\t";
			cout << "地址：" << abs->personarray[i].m_Address << endl;
		}
	}
	system("pause");
	system("cls");
}
int isExist(Addressbooks* abs, string name)
{
	for (int i = 0; i < abs->m_Size; i++)
	{
		if (abs->personarray[i].m_Name == name)
			return i;
		
	} return -1;
}
void deleteperson(Addressbooks* abs,string name)
{
	
	cin >> name;
	if (isExist(abs, name) != -1)
	{
		for (int i = 0; i < abs->m_Size; i++)
		{
			if (abs->personarray[i].m_Name == name) {
				
				for (int i = 0; i < abs->m_Size; i++)
				{
					//数据前移的逻辑删除操作
					abs->personarray[i] = abs->personarray[i + 1];
				}
				abs->m_Size--;
				cout << "删除成功" << endl;
			}
		}
		
	}
	else {
		cout << "查无此人" << endl;
	}
	system("pause");
	system("cls");
}
void findperson(Addressbooks* abs)
{
	cout << "请输入你要查找的联系人" << endl;
	string name;
	cin >> name;
	//判断指定的联系人是否在通讯录中
	int ret = isExist(abs, name);
	if (ret != -1)
	{
		cout << "姓名：" << abs->personarray[ret].m_Name<<"\t";
		cout << "性别： " << abs->personarray[ret].m_Sex << "\t";
		cout << "年龄： " << abs->personarray[ret].m_Age << "\t";
		cout << "电话： " << abs->personarray[ret].m_Phone << "\t";
		cout << "地址： " << abs->personarray[ret].m_Address << endl;
		
	}
	else {
		cout << "查无此人" << endl;
	}
	system("pause");
	system("cls");
}
void modifyperson(Addressbooks* abs)//调用isExist，让返回值等于ret,再判断ret是否等于-1；不等于就仿照addperson  else部分修改联系人，在这里，添加就是修改，因为都是*赋值操作*；
{
	string name;
	cout << "请输入要修改联系人的姓名：" << endl;
	cin >> name;
	int index = isExist(abs, name);
	if (index != -1)
	{
		cout << "联系人已找到，请修改信息" << endl;
		deleteperson(abs,name);
		addPerson(abs);
		cout << "联系人信息修改成功!" << endl;
	}
	else {
		cout << "未找到此联系人,请从新输入" << endl;
	}
	system("pause");
	system("cls");
}
void cleanPerson(Addressbooks* abs)
{
	cout << "是否要清空" << endl;
	cout << "1---确认清空" << endl;
	cout << "2---不清空" << endl;
	int ok;
	cin >> ok;
	if (ok == 1) {
		abs->m_Size = 0;
		cout << "通讯录已清空" << endl;
		system("pause");
		system("cls");
	}
}
int main()
{
	Addressbooks abs;
	abs.m_Size = 0;
	int select = 0;
	
	while (true)
	{
		showmenu();
		cin >> select;

		switch (select)
		{
		case 1://1.添加联系人
			addPerson(&abs);
			break;
		case 2://2.显示联系人
			showperson(&abs);
			break;
		case 3://3.删除联系人
		/*{
			cout << "请输入删除联系人的姓名：" << endl;
			string name;
			cin >> name;
			if (isExist(&abs, name) == -1)
			{
				cout << "查无此人" << endl;
			}
			else {
				cout << "找到此人" << endl;
			}
		}*/
		{
			string name;
			cout << "请输入你要删除人的姓名" << endl;
			cin >> name;
			deleteperson(&abs, name);
			break;
		}
		case 4://4.查找联系人
			findperson(&abs);
			break;
		case 5://5.修改联系人
			modifyperson(&abs);
			break;
		case 6://6.清空联系人
			cleanPerson(&abs);
			break;
		case 0://0.退出通讯录
			cout << "欢迎下次使用" << endl;
			system("pause");
			return 0;
			break;
		default:
			break;
		}
	}
	
	system("pause");// 在程序执行完毕后，暂停控制台窗口的关闭，等待用户输入任意键后才会关闭窗口

	return 0;
}
