#define _CRT_SECURE_NO_WARNINGS 
#include<iostream>
using namespace std;
//1、创建一个立方体类；
//2、设计属性和行为
//3、分别用全局函数和成员函数获取立方体的体积和面积
//4、判断两个立方体是否相等；
class cube
{
public:
	//设置长，宽，高
	//获取长宽高
	void setL(int l)
	{
		m_L = l;
	}
	int getL()
	{
		return m_L;
	}
	
	void setW(int w)
	{
		m_W = w;
	}
	int getW()
	{
		return m_W;
	}
	
	void setH(int h)
	{
		m_H = h;
	}
	int getH()
	{
		return m_H;
	}
	//获取立方体的面积
	int calculateS()
	{
		return 2 * m_L * m_W + 2 * m_L * m_H + 2 * m_W * m_H;
	}
	//获取立方体的体积
	/*int calculateV()
	{
		return m_H * m_L * m_W;
	}*/
	//判断两个立方体是否相等
	/*bool is_same(cube& c)
	{
		if （m_L== c.getL()&& m_W == c.getW() && m_H == c.getH())
			return true;
		return false;
	}*/
	bool is_same(cube& c)
	{
		if (m_L == c.getL() && m_W == c.getW() && m_H == c.getH())
			return true;
		return false; // 修正了这里，添加了 return false，确保函数总是返回一个布尔值
	}

private:
	//成员属性设置为私有
	int m_L;
	int m_W;
	int m_H;
};
//全局函数带默认参数；
int calculateV(int l, int w=10, int h=10)
{
	return l * w * h;
}
//利用全局函数判断两个立方体是否相等
bool issame(cube &c1, cube &c2)
{
	if (c1.getL() == c2.getL() && c1.getW() == c2.getW() && c1.getH() == c2.getH())
	{
		return true;
	} return false;
		
}
int main()
{
	//创建立方体
	cube c1;
	c1.setL(10);
	c1.setH(10);
	c1.setW(10);
	int S = c1.calculateS();
	cout << "立方体的面积：" << S << endl;
	cout << "立方体的面积：" << calculateV(10) << endl;
	//创建第二个立方体
	cube c2;
	c2.setL(10);
	c2.setH(10);
	c2.setW(11);
	//利用全局函数判断
	bool ret = issame(c1, c2);
	if (ret)/*important*/
	{
		cout << "两个立方体相等" << endl;

	}
	else
	{
		cout << "两个立方体不相等" << endl;
	}
	//利用成员函数判断
	ret = c1.is_same(c2);
	if (ret)/*important*/
	{
		cout << "成员函数：两个立方体相等" << endl;

	}
	else
	{
		cout << "成员函数：两个立方体不相等" << endl;
	}
	system("pause");
	return 0;
}
