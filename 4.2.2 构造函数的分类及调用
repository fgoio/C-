#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;
class Person
{
public:
	// 对象的初始化和清理
	//1、构造函数 进行初始化操作
	/*没有返回值也不写void
	* 函数名与类名称相同
	* 可以有参数，因此可以发生函数重载
	* 程序在调用类对象时自动调用对象，无需手动调用，仅调用一次*/
	Person()
	{
		cout << "Person无参构造函数调用" << endl;
	}
	Person(int a)
	{
		age = a;
		cout << "Person有参构造函数调用" << endl;
	}
	Person(const Person &p)//想想为什么会是引用
	{
		age = p.age;
		cout << "Person拷贝构造函数调用" << endl;
	}
	//2、析构函数 进行清理的操作
	//没有返回值也不写void
	//函数名与类名称相同,在名称前加上符号~
	//不能有参数，因此不能发生函数重载
	//对象执行完毕销毁后才会调用析构函数,无需手动(传参)调用，仅调用一次
	~Person()
	{
		cout << "Person 析构函数调用" << endl;
	}
public:
	int age;
};
void test01()
{
	Person p;//调用无参构造函数
}
void test02()
{
	//1、括号法
	//Person p1;//默认构造函数调用
	//Person p2(10);//有参构造函数调用
	//Person p3(p2);//拷贝构造函数调用(克隆一份)
	//cout << "p2的年龄：" <<p2.age <<endl;
	//cout << "p3的年龄：" << p3.age << endl;
	//2、显式法
	/*Person p2 = Person(10);
	Person p3 = Person(p2);*/
	//Person(10); //单独写就是匿名对象  当前行结束之后，马上析构
	//3、隐式转换法
	Person p2 = 10;
	Person p3=p2;
}
int main()
{
	//test01();
	test02();
	Person p;//(对象执行完毕销毁后才会调用析构函数)
	system("pause");
	return 0;
}
