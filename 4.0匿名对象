#include <iostream>  
using namespace std;

class Point {
public:
    Point(int a, int b) {
        cout << "有参构造函数被调用了1" << endl;
        this->x = a;
        this->y = b;
    }

    // 使用const引用来允许从临时对象（如匿名对象）拷贝  
    Point(const Point& a1) {
        cout << "拷贝构造函数被调用了2" << endl;
        this->x = a1.x;
        this->y = a1.y;
    }

    ~Point() {
        cout << "析构函数被调用了3" << endl;
        cout << "x=" << x << ", y=" << y << endl;
    }

    // 返回当前对象的引用，不会创建匿名对象  
    Point& Protset(int a) {
        this->x = a;
        return *this;
    }

    // 创建一个临时对象（匿名对象），并通过拷贝构造函数返回它  
    Point Protset2(int a) {
        Point temp(a, a);
        return temp; // 这里会调用拷贝构造函数来创建一个新的匿名对象并返回  
    }

    void PrintfA() const {
        cout << "x=" << x << ", y=" << y << endl;
    }

private:
    int x;
    int y;
};

void ProtectA() {
    // 场景1：直接初始化时产生的匿名对象  
    // Point(1, 1) 是一个匿名对象，用于直接初始化 p1  
    Point p1 = Point(1, 1);

    // 场景2：返回局部对象时产生的匿名对象  
    // Protset2 返回的是一个匿名对象，它通过拷贝构造函数创建  
    Point p2 = p1.Protset2(4);
    p2.PrintfA();

    // 场景3：通过赋值操作符产生的匿名对象  
    // Protset2 再次返回一个匿名对象，并通过赋值操作符赋给 p1  
    p1 = p1.Protset2(5);
    p1.PrintfA();
}

int main() {
    ProtectA();
    // system("pause"); // 这行代码是特定于Windows的，用于暂停控制台窗口  
    // 如果你在其他平台上运行代码，或者想使用更标准的方法，请考虑使用其他方法（例如等待用户输入）  
    return 0;
}
